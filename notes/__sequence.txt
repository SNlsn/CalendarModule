rvm use @unify2

cd ~/Desktop/ChronicTest

rails new ChronicCal4
cd ChronicCal4
mate .

edit gemfile:
gem 'jquery-rest-rails'
gem 'chronic'

bundle

copy fullcalendar js (min) and css to assets directories

create a file named .rvmrc at the root of the project, containing
rvm ruby-1.9.3-p125@unify2

delete README.rdoc and replace with README.md and some sane content.

rails g scaffold assignment title description:text assignment_type starts_at:datetime duration_hours:integer duration_minutes:integer ends_at:datetime all_day:boolean

before running migration, modify migration file:
t.boolean :all_day, :default => false

rake db:migrate

Assignment View
delete "ends_at" from form
change
<div class="field">
  <%= f.label :starts_at %><br />
  <%= f.datetime_select :starts_at %>
</div>
to
<div class="field">
  <%= f.label :starts_at_text, 'Starts at: ' %><br />
  <%= f.text_field :starts_at_text %>
</div>

Assignment Model:

class Assignment < ActiveRecord::Base
  
  validate :check_starts_at_text
  
  scope :before, lambda {|end_time| {:conditions => ["ends_at < ?", Assignment.format_date(end_time)] }}
  scope :after, lambda {|start_time| {:conditions => ["starts_at > ?", Assignment.format_date(start_time)] }}
  
  # create the "ends_at" value like this:
    before_save :save_starts_at_text
    before_save :create_end
    
    # getter for starts_at
    attr_writer :starts_at_text
  
    # need to override the json view to return what full_calendar is expecting.
    # http://arshaw.com/fullcalendar/docs/event_data/Event_Object/
    def as_json(options = {})
      {
        :id => self.id,
        :title => self.title,
        :description => self.description || "",
        :start => starts_at.rfc822,
        :end => ends_at.rfc822,
        :allDay => self.all_day,
        :recurring => false,
        :className => self.assignment_type,
        :url => Rails.application.routes.url_helpers.assignment_path(id),
        #:color => "red"
      }

    end

      def starts_at_text
        @starts_at_text || starts_at.try(:strftime, "%Y-%m-%d %H:%M:%S")
      end

      def save_starts_at_text
        self.starts_at = Chronic.parse(@starts_at_text) if @starts_at_text.present?
      end

      def check_starts_at_text
        if @starts_at_text.present? && Chronic.parse(@starts_at_text).nil?
          errors.add :starts_at_text, "cannot be parsed"
        end
      rescue ArgumentError
        errors.add :starts_at_text, "is out of range"
      end
  
  def self.format_date(date_time)
    Time.at(date_time.to_i).to_formatted_s(:db)
  end

    private
    def create_end
      unless starts_at.nil?
    self.ends_at = starts_at.advance(:hours => duration_hours, :minutes => duration_minutes)
  end
    end
    
end

Config/Routes
add:
resource :calendar, :only => [:show]
root :to => 'home#index'

(be sure to delete default index)


Calendar:
Copy calendars_controller, home_controller and calendars directory (views) from Bokmann example

Assignments Controller:
class AssignmentsController < ApplicationController
  # GET /assignments
  # GET /assignments.json
  def index
    # full_calendar will hit the index method with query parameters
    # 'start' and 'end' in order to filter the results for the
    # appropriate month/week/day.  It should be possible to change
    # this to be starts_at and ends_at to match rails conventions.
    # I'll eventually do that to make the demo a little cleaner.
    @assignments = Assignment.scoped  
    @assignments = @assignments.after(params['start']) if (params['start'])
    @assignments = @assignments.before(params['end']) if (params['end'])

    respond_to do |format|
      format.html # index.html.erb
      format.json { render :json => @assignments }
    end
  end

  # GET /assignments/1
  # GET /assignments/1.json
  def show
    @assignment = Assignment.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render :json => @assignment }
    end
  end

  # GET /assignments/new
  # GET /assignments/new.json
  def new
    @assignment = Assignment.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render :json => @assignment }
    end
  end

  # GET /assignments/1/edit
  def edit
    @assignment = Assignment.find(params[:id])
  end

  # POST /assignments
  # POST /assignments.json
  def create
    @assignment = Assignment.new(params[:assignment])

    respond_to do |format|
      if @assignment.save
        format.html { redirect_to @assignment, :notice => 'Assignment was successfully created.' }
        format.json { render :json => @assignment, :status => :created, :location => @assignment }
      else
        format.html { render :action => "new" }
        format.json { render :json => @assignment.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /assignments/1
  # PUT /assignments/1.json
  def update
    @assignment = Assignment.find(params[:id])

    respond_to do |format|
      if @assignment.update_attributes(params[:assignment])
        format.html { redirect_to @assignment, :notice => 'Assignment was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render :action => "edit" }
        format.json { render :json => @assignment.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /assignments/1
  # DELETE /assignments/1.json
  def destroy
    @assignment = Assignment.find(params[:id])
    @assignment.destroy

    respond_to do |format|
      format.html { redirect_to assignments_url }
      format.json { head :no_content }
    end
  end
end


uncomment config time zone, change to
 config.time_zone = 'Eastern Time (US & Canada)'

 modify assets/javascripts/application.js to read:
 //= require jquery
 //= require jquery_ujs
 //= require jquery-ui
 //= require jquery.rest
 //= require fullcalendar.min.js
 //= require_tree .

 modify assets/javascripts/application.css to read:
 *= require_self
 *= require fullcalendar.css
 *= require_tree .
 
 copy bokmann's calendar.js.coffee to assets/javascripts
 copy bokmann's calendar.css.scss to assets/stylesheets

 strftime expression that looks nice (add to all event views that show time: show, edit, index):
 .strftime("%A %b. %-e, %Y, %l:%M%p")
 for example:
 <%= @event.starts_at.strftime("%A %b. %-e, %Y, %l:%M%p") %>
   make the "event/assignment_type" be a drop down menu from a helper collection of preset choices (confirmed, tentative, personal)
   
edit AssignmentsHelper module, creating methods that return arrays of options:
 def assignment_type_options
   ['confirmed', 'tentative', 'personal']
 end

edit Assignment _form to add select for event type:
 <%= f.select(:event_type, event_type_options) %>

Set className
(http://arshaw.com/fullcalendar/docs/event_data/Event_Object/#color-options)
In Assignment model json block, add
:className => self.asignment_type,

in css follow this form:
.personal, .fc-agenda .personal .fc-event-time, .personal a, .personal .fc-event-skin {
   background-color: #f00; /* background color */
   border-color: #f00;     /* border color */
   color: #000;           /* text color */
   }

 change fullcalendar default view in calendar.js.coffee:
 defaultView: 'agendaWeek',
 to suppress the Al Day slot in agenda views, add
 allDaySlot: false,

set up git (including modifications to .gitignore):
  git init
  git add .
  git commit -m "Initial Commit"

rails server